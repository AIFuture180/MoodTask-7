: "const moodActivities = {\n    tired: [\n        { activity: \"Take a 10-minute power nap to recharge.\", tool: \"Guided nap timer (coming soon)\", followUp: \"Did that nap boost your energy?\" },\n        { activity: \"Drink a glass of water to rehydrate.\", tool: \"Track hydration in Moodtask app\", followUp: \"Feeling more awake now?\" },\n        { activity: \"Listen to an upbeat playlist.\", tool: \"Curated playlists in app\", followUp: \"Did the music lift your mood?\" },\n        { activity: \"Do a quick stretch.\", tool: \"Open stretch tool\", action: () => openPopup('stretch') }\n    ],\n    stressed: [\n        { activity: \"Try a 1-minute breathing exercise.\", tool: \"Open breathing tool\", action: () => openPopup('breathing') },\n        { activity: \"Write down 3 things you’re grateful for.\", tool: \"Open gratitude tool\", action: () => openPopup('gratitude') },\n        { activity: \"Use a stress ball to release tension.\", tool: \"Shop stress ball\", affiliate: \"https://amzn.to/3example\" },\n        { activity: \"Listen to a calming soundscape.\", tool: \"Open soundscape tool\", action: () => openPopup('soundscape') }\n    ],\n    bored: [\n        { activity: \"Doodle for a minute to spark creativity.\", tool: \"Open doodle tool\", action: () => openPopup('doodle') },\n        { activity: \"Solve a quick sudoku puzzle.\", tool: \"Open sudoku tool\", action: () => openPopup('sudoku') },\n        { activity: \"Watch a funny video (in app).\", tool: \"Explore videos in Moodtask\", followUp: \"Did that make you smile?\" },\n        { activity: \"Try a brain teaser (coming soon).\", tool: \"Placeholder for future tool\" }\n    ],\n    excited: [\n        { activity: \"Share your excitement in a journal.\", tool: \"Open gratitude tool\", action: () => openPopup('gratitude') },\n        { activity: \"Set a small goal to channel energy.\", tool: \"Track goals in app\", followUp: \"Did that focus your excitement?\" },\n        { activity: \"Dance to a favorite song.\", tool: \"Curated playlists in app\", followUp: \"Did dancing amplify your vibe?\" }\n    ],\n    sad: [\n        { activity: \"Write a gratitude note to lift your spirits.\", tool: \"Open gratitude tool\", action: () => openPopup('gratitude') },\n        { activity: \"Listen to a comforting soundscape.\", tool: \"Open soundscape tool\", action: () => openPopup('soundscape') },\n        { activity: \"Practice self-compassion meditation.\", tool: \"Guided meditation in app\", followUp: \"Did that bring some comfort?\" }\n    ],\n    angry: [\n        { activity: \"Punch a virtual punching bag.\", tool: \"Open punching tool\", action: () => openPopup('punching') },\n        { activity: \"Shred your worries.\", tool: \"Open worry shredder\", action: () => openPopup('worry') },\n        { activity: \"Take 10 deep breaths.\", tool: \"Open breathing tool\", action: () => openPopup('breathing') }\n    ],\n    happy: [\n        { activity: \"Share your happiness with a kind note.\", tool: \"Open gratitude tool\", action: () => openPopup('gratitude') },\n        { activity: \"Capture this moment in a journal.\", tool: \"Open gratitude tool\", action: () => openPopup('gratitude') },\n        { activity: \"Celebrate with a quick dance.\", tool: \"Curated playlists in app\", followUp: \"Did that boost your joy?\" }\n    ],\n    confused: [\n        { activity: \"Write down what’s confusing you.\", tool: \"Open gratitude tool\", action: () => openPopup('gratitude') },\n        { activity: \"Focus on a calming color.\", tool: \"Open color focus tool\", action: () => openPopup('color') },\n        { activity: \"Break your problem into steps.\", tool: \"Track tasks in app\", followUp: \"Feeling more clear now?\" }\n    ],\n    default: [\n        { activity: \"Try a quick breathing exercise to center yourself.\", tool: \"Open breathing tool\", action: () => openPopup('breathing') },\n        { activity: \"Write down how you’re feeling.\", tool: \"Open gratitude tool\", action: () => openPopup('gratitude') },\n        { activity: \"Explore Moodtask’s habit tracker.\", tool: \"Download Moodtask\", followUp: \"Ready to start your journey?\" }\n    ]\n};\n\nfunction submitMood() {\n    const input = document.getElementById('mood-input').value.trim().toLowerCase();\n    const responseDiv = document.getElementById('mood-response');\n    let activities = moodActivities.default;\n\n    for (const mood in moodActivities) {\n        if (input.includes(mood)) {\n            activities = moodActivities[mood];\n            break;\n        }\n    }\n\n    let html = '<h3>Here are some ways to optimize your mood:</h3><ul>';\n    activities.forEach(activity => {\n        html += `<li>${activity.activity} <a href=\"#\" ${activity.action ? `onclick=\"${activity.action.toString().replace(/\\n/g, '')}\"` : activity.affiliate ? `href=\"${activity.affiliate}\" target=\"_blank\" rel=\"noopener noreferrer\"` : ''}>[${activity.tool}]</a>`;\n        if (activity.followUp) html += `<p class=\"follow-up\">${activity.followUp}</p>`;\n    });\n    html += '</ul>';\n    responseDiv.innerHTML = html;\n    document.getElementById('mood-input').value = '';\n}\n\n// Reused popup functions from original code\nlet currentSound = null;\nconst clickSound = document.getElementById('click-sound');\nconst successSound = document.getElementById('success-sound');\nconst punchSound = document.getElementById('punch-sound');\nconst shredSound = document.getElementById('shred-sound');\nconst natureSounds = {\n    nature: document.getElementById('nature-sound'),\n    rain: document.getElementById('rain-sound'),\n    waves: document.getElementById('waves-sound')\n};\n\nfunction playSound(sound, volume = 0.5) {\n    sound.volume = volume;\n    sound.currentTime = 0;\n    sound.play().catch(err => console.error('Sound playback failed:', err));\n}\n\nfunction openPopup(tool) {\n    playSound(clickSound, 0.3);\n    const popup = document.getElementById(`${tool}-popup`);\n    popup.style.display = 'flex';\n    if (tool === 'breathing') startBreathing();\n    if (tool === 'soundscape') startSoundscape();\n    if (tool === 'punching') startPunching();\n    if (tool === 'stretch') startStretch();\n    if (tool === 'doodle') startDoodle();\n    if (tool === 'worry') startWorry();\n    if (tool === 'color') startColorFocus();\n    if (tool === 'sudoku') startSudoku();\n    if (tool === 'gratitude') startGratitude();\n}\n\nfunction closePopup(tool) {\n    const popup = document.getElementById(`${tool}-popup`);\n    popup.style.display = 'none';\n    if (tool === 'breathing') clearInterval(window.breathingInterval);\n    if (tool === 'soundscape') {\n        clearInterval(window.soundscapeInterval);\n        if (currentSound) currentSound.pause();\n    }\n    if (tool === 'punching') clearInterval(window.punchingInterval);\n    if (tool === 'stretch') clearInterval(window.stretchInterval);\n    if (tool === 'doodle') clearInterval(window.doodleInterval);\n    if (tool === 'worry') {\n        document.getElementById('worry-text').value = '';\n        document.getElementById('paper-strips-container').innerHTML = '';\n    }\n    if (tool === 'color') clearInterval(window.colorInterval);\n    if (tool === 'sudoku') clearInterval(window.sudokuInterval);\n    if (tool === 'gratitude') document.getElementById('gratitude-text').value = '';\n}\n\nfunction updateProgress(elementId, total, current) {\n    const progressBar = document.getElementById(elementId);\n    const percentage = ((total - current) / total) * 100;\n    progressBar.style.width = percentage + '%';\n}\n\n// Popup-specific functions (reused from original code)\nfunction startBreathing() {\n    let time = 60;\n    let cycleTime = 0;\n    const cycleDuration = 13;\n    const steps = [\n        { text: \"Inhale\", instruction: \"Breathe in slowly through your nose...\", class: \"inhale\", duration: 4 },\n        { text: \"Hold\", instruction: \"Hold your breath...\", class: \"hold\", duration: 4 },\n        { text: \"Exhale\", instruction: \"Breathe out slowly through your mouth...\", class: \"exhale\", duration: 4 },\n        { text: \"Pause\", instruction: \"Relax for a moment...\", class: \"pause\", duration: 1 }\n    ];\n    const stepElement = document.getElementById('breathing-step');\n    const instructionElement = document.getElementById('breathing-instruction');\n    const timerElement = document.getElementById('breathing-timer');\n    const circle = document.getElementById('breathing-circle');\n    circle.className = '';\n    updateProgress('breathing-progress', 60, 0);\n\n    function updateBreathing() {\n        const currentStepIndex = Math.floor(cycleTime / 4) % 4;\n        const currentStep = steps[currentStepIndex];\n        stepElement.textContent = currentStep.text;\n        instructionElement.textContent = currentStep.instruction;\n        circle.className = currentStep.class;\n        cycleTime = (cycleTime + 1) % cycleDuration;\n        time--;\n        timerElement.textContent = `Time remaining: ${time}s`;\n        updateProgress('breathing-progress', 60, time);\n        if (time <= 0) {\n            clearInterval(window.breathingInterval);\n            playSound(successSound, 0.4);\n            setTimeout(() => closePopup('breathing'), 1500);\n        }\n    }\n\n    updateBreathing();\n    window.breathingInterval = setInterval(updateBreathing, 1000);\n}\n\nfunction startSoundscape() {\n    let time = 90;\n    const timerElement = document.getElementById('soundscape-timer');\n    const selectElement = document.getElementById('soundscape-select');\n    const playButton = document.getElementById('play-btn');\n    const volumeSlider = document.getElementById('volume-slider');\n    updateProgress('soundscape-progress', 90, 0);\n    playButton.innerHTML = '<i class=\"fas fa-play\"></i>';\n    selectElement.onchange = function() {\n        if (currentSound) {\n            currentSound.pause();\n            currentSound.currentTime = 0;\n            playButton.innerHTML = '<i class=\"fas fa-play\"></i>';\n        }\n    };\n    playButton.onclick = function() {\n        const soundType = selectElement.value;\n        if (currentSound && currentSound !== natureSounds[soundType]) {\n            currentSound.pause();\n            currentSound.currentTime = 0;\n        }\n        currentSound = natureSounds[soundType];\n        if (currentSound.paused) {\n            currentSound.play().then(() => {\n                currentSound.volume = volumeSlider.value;\n                playButton.innerHTML = '<i class=\"fas fa-pause\"></i>';\n            }).catch(err => console.error('Sound playback failed:', err));\n        } else {\n            currentSound.pause();\n            currentSound.currentTime = 0;\n            playButton.innerHTML = '<i class=\"fas fa-play\"></i>';\n        }\n    };\n    volumeSlider.oninput = function() {\n        if (currentSound) currentSound.volume = this.value;\n    };\n    window.soundscapeInterval = setInterval(() => {\n        time--;\n        timerElement.textContent = `Time remaining: ${time}s`;\n        updateProgress('soundscape-progress', 90, time);\n        if (time <= 0) {\n            clearInterval(window.soundscapeInterval);\n            if (currentSound) currentSound.pause();\n            playSound(successSound, 0.4);\n            setTimeout(() => closePopup('soundscape'), 1500);\n        }\n    }, 1000);\n}\n\nfunction startPunching() {\n    let time = 30;\n    let count = 0;\n    const bag = document.getElementById('punching-bag');\n    const timerElement = document.getElementById('punching-timer');\n    bag.textContent = '0';\n    bag.style.transform = 'scale(1)';\n    updateProgress('punching-progress', 30, 0);\n    bag.onclick = () => {\n        count++;\n        bag.textContent = count;\n        playSound(punchSound, 0.3);\n        bag.style.transform = 'scale(0.9)';\n        setTimeout(() => bag.style.transform = 'scale(1)', 100);\n    };\n    window.punchingInterval = setInterval(() => {\n        time--;\n        timerElement.textContent = `Time remaining: ${time}s`;\n        updateProgress('punching-progress', 30, time);\n        if (time <= 0) {\n            clearInterval(window.punchingInterval);\n            playSound(successSound, 0.4);\n            bag.innerHTML = `Great job! ${count} punches!`;\n            setTimeout(() => closePopup('punching'), 1500);\n        }\n    }, 1000);\n}\n\nfunction startStretch() {\n    let time = 60;\n    const stretches = [\n        \"Reach up high for 10 seconds.\",\n        \"Touch your toes for 10 seconds.\",\n        \"Stretch your arms behind your back.\",\n        \"Rotate your shoulders slowly.\"\n    ];\n    const stretchElement = document.getElementById('stretch-prompt');\n    const timerElement = document.getElementById('stretch-timer');\n    stretchElement.textContent = stretches[Math.floor(Math.random() * stretches.length)];\n    updateProgress('stretch-progress', 60, 0);\n    window.stretchInterval = setInterval(() => {\n        time--;\n        timerElement.textContent = `Time remaining: ${time}s`;\n        updateProgress('stretch-progress', 60, time);\n        if (time <= 0) {\n            clearInterval(window.stretchInterval);\n            playSound(successSound, 0.4);\n            setTimeout(() => closePopup('stretch'), 1500);\n        }\n    }, 1000);\n}\n\nfunction startDoodle() {\n    let time = 90;\n    const canvas = document.getElementById('doodle-canvas');\n    const ctx = canvas.getContext('2d');\n    const timerElement = document.getElementById('doodle-timer');\n    let isDrawing = false;\n    ctx.lineWidth = 5;\n    ctx.lineCap = 'round';\n    canvas.onmousedown = () => isDrawing = true;\n    canvas.onmouseup = () => isDrawing = false;\n    canvas.onmousemove = (e) => {\n        if (!isDrawing) return;\n        const rect = canvas.getBoundingClientRect();\n        ctx.lineTo(e.clientX - rect.left, e.clientY - rect.top);\n        ctx.stroke();\n    };\n    updateProgress('doodle-progress', 90, 0);\n    window.doodleInterval = setInterval(() => {\n        time--;\n        timerElement.textContent = `Time remaining: ${time}s`;\n        updateProgress('doodle-progress', 90, time);\n        if (time <= 0) {\n            clearInterval(window.doodleInterval);\n            playSound(successSound, 0.4);\n            setTimeout(() => closePopup('doodle'), 1500);\n        }\n    }, 1000);\n}\n\nfunction startWorry() {\n    let time = 30;\n    const worryText = document.getElementById('worry-text');\n    const timerElement = document.getElementById('worry-timer');\n    worryText.value = '';\n    updateProgress('worry-progress', 30, 0);\n    window.worryInterval = setInterval(() => {\n        time--;\n        timerElement.textContent = `Time remaining: ${time}s`;\n        updateProgress('worry-progress', 30, time);\n        if (time <= 0) {\n            clearInterval(window.worryInterval);\n            playSound(successSound, 0.4);\n            setTimeout(() => closePopup('worry'), 1500);\n        }\n    }, 1000);\n}\n\nfunction shredWorry() {\n    const worryText = document.getElementById('worry-text');\n    const container = document.getElementById('paper-strips-container');\n    if (!worryText.value.trim()) {\n        alert('Please enter a worry to shred.');\n        return;\n    }\n    container.innerHTML = '';\n    for (let i = 0; i < 5; i++) {\n        const strip = document.createElement('div');\n        strip.className = 'paper-strip';\n        strip.style.left = `${i * 20}px`;\n        container.appendChild(strip);\n    }\n    playSound(shredSound, 0.5);\n    setTimeout(() => {\n        worryText.value = '';\n        container.innerHTML = '';\n        playSound(successSound, 0.4);\n        alert('Worry shredded!');\n    }, 1000);\n}\n\nfunction startColorFocus() {\n    let time = 60;\n    const colors = ['#ff6347', '#4682b4', '#32cd32'];\n    const colorBox = document.getElementById('color-square');\n    const timerElement = document.getElementById('color-timer');\n    colorBox.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];\n    updateProgress('color-progress', 60, 0);\n    window.colorInterval = setInterval(() => {\n        time--;\n        timerElement.textContent = `Time remaining: ${time}s`;\n        updateProgress('color-progress', 60, time);\n        if (time <= 0) {\n            clearInterval(window.colorInterval);\n            playSound(successSound, 0.4);\n            setTimeout(() => closePopup('color'), 1500);\n        }\n    }, 1000);\n}\n\nfunction startSudoku() {\n    let time = 90;\n    const gridElement = document.getElementById('sudoku-grid');\n    const timerElement = document.getElementById('sudoku-timer');\n    gridElement.innerHTML = '';\n    const puzzle = [\n        [5, 3, '', '', 7, '', '', '', ''],\n        [6, '', '', 1, 9, 5, '', '', ''],\n        ['', 9, 8, '', '', '', '', 6, ''],\n        [8, '', '', '', 6, '', '', '', 3],\n        [4, '', '', 8, '', 3, '', '', 1],\n        ['', '', '', '', 2, '', '', '', 6],\n        ['', 6, '', '', '', '', 2, 8, ''],\n        ['', '', '', 4, 1, 9, '', '', 5],\n        ['', '', '', '', 8, '', '', 7, 9]\n    ];\n    for (let i = 0; i < 9; i++) {\n        for (let j = 0; j < 9; j++) {\n            const input = document.createElement('input');\n            input.type = 'text';\n            input.maxLength = 1;\n            input.value = puzzle[i][j] || '';\n            input.disabled = !!puzzle[i][j];\n            input.oninput = () => {\n                if (!/^[1-9]?$/.test(input.value)) input.value = '';\n            };\n            gridElement.appendChild(input);\n        }\n    }\n    updateProgress('sudoku-progress', 90, 0);\n    window.sudokuInterval = setInterval(() => {\n        time--;\n        timerElement.textContent = `Time remaining: ${time}s`;\n        updateProgress('sudoku-progress', 90, time);\n        if (time <= 0) {\n            clearInterval(window.sudokuInterval);\n            playSound(successSound, 0.4);\n            setTimeout(() => closePopup('sudoku'), 1500);\n        }\n    }, 1000);\n}\n\nfunction startGratitude() {\n    let time = 30;\n    const gratitudeText = document.getElementById('gratitude-text');\n    const timerElement = document.getElementById('gratitude-timer');\n    gratitudeText.value = '';\n    updateProgress('gratitude-progress', 30, 0);\n    window.gratitudeInterval = setInterval(() => {\n        time--;\n        timerElement.textContent = `Time remaining: ${time}s`;\n        updateProgress('gratitude-progress', 30, time);\n        if (time <= 0) {\n            clearInterval(window.gratitudeInterval);\n            playSound(successSound, 0.4);\n            setTimeout(() => closePopup('gratitude'), 1500);\n        }\n    }, 1000);\n}\n\nfunction saveGratitude() {\n    const gratitudeText = document.getElementById('gratitude-text');\n    if (!gratitudeText.value.trim()) {\n        alert('Please enter something you are grateful for.');\n        return;\n    }\n    let gratitudes = JSON.parse(localStorage.getItem('gratitudes') || '[]');\n    gratitudes.push({ text: gratitudeText.value, date: new Date().toLocaleString() });\n    localStorage.setItem('gratitudes', JSON.stringify(gratitudes));\n    playSound(successSound, 0.4);\n    alert('Gratitude saved!');\n    gratitudeText.value = '';\n}\n\nfunction clearCanvas() {\n    const canvas = document.getElementById('doodle-canvas');\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n}\n\nfunction saveDoodle() {\n    const canvas = document.getElementById('doodle-canvas');\n    const link = document.createElement('a');\n    link.download = 'doodle.png';\n    link.href = canvas.toDataURL();\n    link.click();\n}
